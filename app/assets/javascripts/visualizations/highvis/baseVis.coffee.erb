###
  * Copyright (c) 2011 - 2017, iSENSE Project. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer. Redistributions in binary
  * form must reproduce the above copyright notice, this list of conditions and
  * the following disclaimer in the documentation and/or other materials
  * provided with the distribution. Neither the name of the University of
  * Massachusetts Lowell nor the names of its contributors may be used to
  * endorse or promote products derived from this software without specific
  * prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  * DAMAGE.
  *
###
$ ->
  if namespace.controller is 'visualizations' and
  namespace.action in ['displayVis', 'embedVis', 'show']
    window.globals ?= {}
    globals.configs ?= {}

    class window.BaseVis
      constructor: (@canvas) ->
        @configs ?= {}
        @isSummary = false

        globals.configs.isPeriod ?= false # Controls how series are constructed in update(). 
        globals.configs.periodMode ?= 'off' # Changes when a period option is selected.
        
        # globals for saving the unique field ids, in case fields were reordered/new fields were added
        globals.configs.fieldSelectionIds ?= []
        globals.configs.groupByFieldId ?= -1

        # Used to remember the IDs of the selected point on the chart
        globals.selectedPointId = -1
        globals.selectedDataSetId = -1

        # Need X's and Y's for positioning annotations
        globals.selectedPointX = -1
        globals.selectedPointY = -1
        globals.annotationSet = null

        globals.configs.disabledPoints ?= []

      ANALYSISTYPE_TOTAL:      0
      ANALYSISTYPE_MAX:        1
      ANALYSISTYPE_MIN:        2
      ANALYSISTYPE_MEAN:       3
      ANALYSISTYPE_MEAN_ERROR: 4
      ANALYSISTYPE_MEDIAN:     5
      ANALYSISTYPE_COUNT:      6

      SORT_DEFAULT:           -1

      analysisTypeNames: ['Total', 'Maximum', 'Mininum', 'Mean (Average)',
        'Mean with Deviation', 'Median', 'Row Count']

      ###
      Makes sure default fields are still in existence
      Return values:
         0 -> Everything checks out.
              There is a field selected and it exists.
        -1 -> There is no field selected.
              This is not ALWAYS an error, think about table.
        -2 -> There is a field selected which does not exist.
              User needs to reset their defaults.
        -3 -> Case -1 occurred but the problem could not be
              auto-fixed.
        -4 -> Case -2 occurred but the problem could not be
              auto-fixed. This case could cause serious prolems
              and should be handled.
      ###
      validate_fields: (should_fix_problem) ->
        fieldIds = for field in data.fields
          field.fieldID 
        l = globals.configs.fieldSelection.length
        
        for id in globals.configs.fieldSelectionIds 
          if not (id in fieldIds)
            if should_fix_problem
              # Choose the first normal field
              idx = data.normalFields.slice(1)[0]
              id = fieldIds[idx]
              if not id?
                return -4
              else
                globals.configs.fieldSelection = [idx]
                globals.configs.fieldSelectionIds = [id]
            return -2
        
        if l is 0
          if should_fix_problem
            # Choose the first normal field
            idx = data.normalFields.slice(1)[0]
            id = fieldIds[idx]
            if not id?
              return -3
            else
              globals.configs.fieldSelection = [idx]
              globals.configs.fieldSelectionIds = [id]
            return -1
        return 0

      ###
      Start sequence used by runtime
      ###
      start: ->
        $('#' + @canvas).show()
        toolScroll = $('#vis-ctrls').scrollTop()
        #Protect against edge case where the default vis uses the period mode but this dataset doesn't have time data:
        if globals.configs.groupById == data.TIME_PERIOD_FIELD and 
        ( data.hasTimeData is false or data.timeType == data.GEO_TIME )
          data.setGroupIndex(data.COMBINED_FIELD)
          globals.configs.groupById = data.COMBINED_FIELD
          
        @drawControls()
        @update()
        $('#vis-ctrls').scrollTop(toolScroll)

      ###
      Update minor state
      Redraws html controls
      Derived classes should overload to reload content.
      ###
      update: ->
        # Update the ids for field selection in case they were changed
        globals.configs.fieldSelectionIds = []
        for field in globals.configs.fieldSelection
          globals.configs.fieldSelectionIds.push(data.fields[field].fieldID)
        globals.configs.groupByFieldId = data.fields[globals.configs.groupById].fieldID

      ###
      Default delayed update simply updates
      ###
      delayedUpdate: ->
        @update()

      ###
      Method called when vis resize has begun
      Defaults to doing nothing.
      ###
      resize: (newWidth, newHeight) ->

      ###
      End sequence used by runtime
      This is called when the user switches away from this vis.
      Should destroy the chart, hide its canvas and remove controls.
      ###
      end: ->
        $('#' + @canvas).hide()

      ###
      Draws controls
      Derived classes should write control HTML and bind handlers using
      the method such as drawGroupControls.
      ###
      drawControls: ->
        @clearControls()

      ###
      Clear the controls
      Unbinds control handlers and clears the HTML elements.
      ###
      clearControls: ->
        $('#vis-ctrls').empty()
        # The annotation button could not have the same ID as other controls
        #     due to different location on screen.
        $('#add-annotation-button').hide()
        $('#add-annotation-button').unbind('click')

      ###
      Calculate data to be displayed subject to analysis type
      Returns an object of key-value pairs of the form { groupId, value }
      ###
      getGroupedData: (field) ->
        dp = globals.getData(true, globals.configs.activeFilters)
        gData = {}

        analysisMethod =
          switch @configs.analysisType
            when @ANALYSISTYPE_TOTAL      then data.getTotal
            when @ANALYSISTYPE_MAX        then data.getMax
            when @ANALYSISTYPE_MIN        then data.getMin
            when @ANALYSISTYPE_MEAN       then data.getMean
            when @ANALYSISTYPE_MEAN_ERROR then data.getMean
            when @ANALYSISTYPE_MEDIAN     then data.getMedian
            when @ANALYSISTYPE_COUNT      then data.getCount

        for name, groupIdx in data.groups when groupIdx in data.groupSelection
          if data.getCount.call(data, field, groupIdx, dp) > 0
            gData[groupIdx] = analysisMethod.call(data, field, groupIdx, dp)

        return gData


      ###
      Calculate data to be displayed subject to analysis type
      Returns an object of key-value pairs of the form { groupId, value }
      This function is used when the groups are fields.
      ###
      getFieldData: () ->
        fData = {}
        dp = globals.getData(true, globals.configs.activeFilters)

        analysisMethod =
          switch @configs.analysisType
            when @ANALYSISTYPE_TOTAL      then data.getTotal
            when @ANALYSISTYPE_MAX        then data.getMax
            when @ANALYSISTYPE_MIN        then data.getMin
            when @ANALYSISTYPE_MEAN       then data.getMean
            when @ANALYSISTYPE_MEAN_ERROR then data.getMean
            when @ANALYSISTYPE_MEDIAN     then data.getMedian
            when @ANALYSISTYPE_COUNT      then data.getCount

        hiddenFields = data.fields.map((field) -> field.fieldID).filter((id) -> id == -1).length
        for fieldId, index in data.groupSelection
          fData[index] = analysisMethod.call(data, fieldId + hiddenFields, null, dp)

        return fData

      ###
      Draw clipping controls
      ###
      drawClippingControls: ->
        # Draw the Clipping controls
        inctx =
          id: 'clipping-enabled'
          logId: 'clipping-enabled'
          label: 'Filters:'
          buttonEnabled: !(globals.curVis.canvas == "timeline-canvas" and globals.configs.isPeriod)

        outctx = {}
        outctx.id = 'clipping-ctrls'
        outctx.title = 'Filtering'
        outctx.body = HandlebarsTemplates[hbCtrl('clipping')](inctx)
        clipping = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append(clipping)

        # Enable clipping mode switch
        clipMode = Boolean(globals.configs.clippingMode)
        $('#swch-clipping-enabled').bootstrapSwitch
          onSwitchChange: =>
            state = $('#swch-clipping-enabled').bootstrapSwitch('state')
            globals.configs.clippingMode = state
            $(window).resize()
            @start(false)
          state: clipMode

        clippable = @canvas.split('-')[0] in globals.clippingVises
        $('#save-filters-btn').toggleClass('disabled',
          !(clipMode and clippable))

        $('#save-filters-btn').click =>
          @saveFilters()
          $(window).resize()
          @start(false)

        $('#clear-filters-btn').click =>
          globals.configs.activeFilters = []
          clearFilters()
          $(window).resize()
          @start(false)

        if globals.configs.disabledPoints.length == 0
          $('#enable-points-button').prop("disabled", true)

        $('#disable-point-button').click (e) =>
          if @chart.getSelectedPoints().length is 1
            $('#disable-point-button').prop("disabled", true)
            $('#enable-points-button').prop("disabled", false)
            globals.configs.disabledPoints.push({pointId: globals.selectedPointId, dataSetId: globals.selectedDataSetId})
            $(window).resize()
            @start()

        $('#enable-points-button').click (e) =>
          $('#enable-points-button').prop("disabled", true)
          globals.configs.disabledPoints = []
          $(window).resize()
          @start()

        # Initialize and track the status of this control panel
        globals.configs.clippingOpen ?= false
        initCtrlPanel('clipping-ctrls', 'clippingOpen')

      ###
      Adds any filter that this vis is currently applying to the data to the
      active filters
      ###
      saveFilters: (vis) ->
        unless vis? then return

        # Clear out old filters
        globals.configs.activeFilters =
          globals.configs.activeFilters.filter (f) ->
            f.vis != vis

      ###
      A wrapper for making y-axis controls
      See drawAxisControls for more detail
      ###
      drawYAxisControls: (selFields, allFields, radio, name = 'Y Axis',
        iniRadio = 0, handler = ->) ->
        @drawAxisControls('y-axis', name, selFields, allFields, radio,
          iniRadio, handler)

        # Initialize and track the status of this control panel
        globals.configs.yAxisOpen ?= false
        initCtrlPanel('y-axis-ctrls', 'yAxisOpen')

      ###
      Draws axis controls
      This includes a series of checkboxes or radio buttons for selecting
      the active axis field(s).
        id         Identifier prefix for the control panel
        title      Title for the control panel
        selFields  Object that tracks the current field selection
        allFields  Listing of valid fields
        radio      Boolean to draw radio buttons instead of checkboxes
        iniRadio   Initial value of radio if radio == true (optional)
        handler    A function of two parameters to handle selection events
                   Takes the form: (selected, selFields) ->
      ###
      drawAxisControls: (id, title, selFields, allFields, radio, iniRadio = 0,
        handler = ->) ->
        # If there is only one option, then no radio button interaction is
        # possible
        if radio and allFields.length <= 1 then return

        # Configure the y-axis controls
        inctx = {}
        inctx.fields = for f in allFields
          id:    id + '-field-' + f
          label: fieldTitle(data.fields[f])
          value: f
          logId: id + '-field-' + f
          name:  id
        template =  if radio then 'axis-radio' else 'axis-check'
        unless radio
          inctx.checkall =
            id:    'ckall-' + id
            label: '#Select All'
            logId: 'check-all-' + id

        # Draw the y-axis controls
        outctx = {}
        outctx.id = id + '-ctrls'
        outctx.title = title
        outctx.body = HandlebarsTemplates[hbCtrl(template)](inctx)
        axisTools = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append axisTools

        # Add material design
        $('#vis-ctrls').find(".mdl-checkbox").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        $('#vis-ctrls').find(".mdl-radio").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        $('#vis-ctrls').find(".mdl-slider").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        # Initialize checked and make y axis checkbox/radio handler
        if radio and $("#rdo-lbl-#{id}-field-#{iniRadio}")[0]?
          # Set the current display field
          $("#rdo-lbl-#{id}-field-#{iniRadio}")[0].MaterialRadio.check()

          # Record any changes to the display field
          $("input[name='#{id}']").click (e) =>
            index = Number(e.target.value)
            query = "input[name='#{id}'][value='#{index}']"
            $(query).prop('checked', 'true')

            handler(index, selFields)
            @delayedUpdate()

          return

        # Initialize
        updateCheckAll = ->
          numFields = allFields.length
          numSel = selFields.length
          indeterminate = numSel > 0 and numSel < numFields
          if numSel is numFields
            $("#ckbx-lbl-ckall-#{id}")[0].MaterialCheckbox.check()
          else
            $("#ckbx-lbl-ckall-#{id}")[0].MaterialCheckbox.uncheck()
          $('#ckbx-ckall-' + id).prop('indeterminate', indeterminate)

        # Update the check all box
        updateCheckAll()

        # Else initialize the checkboxes to the field selection
        $("label[name='#{id}']").each (key, elem) ->
          if Number(elem.getAttribute('value')) in selFields then $(elem)[0].MaterialCheckbox.check()

        # Set handler for the field checkboxes
        $("input[name='#{id}']").click (e) =>
          index = Number(e.target.getAttribute('value'))
          if index in selFields then arrayRemove(selFields, index)
          else selFields.push(index)

          updateCheckAll()
          handler(index, selFields)
          @delayedUpdate()

        # Set handler for the check all box
        $('#ckbx-ckall-' + id).click =>
          checked = selFields.length isnt allFields.length

          # Empty the array without changing the memory address
          selFields.splice(0, selFields.length)

          # Repopulate the array if necessary
          if checked then selFields.push(f) for f in allFields

          $("label[name='#{id}']").each (key, elem) ->
            if checked
              $(elem)[0].MaterialCheckbox.check()
            else
              $(elem)[0].MaterialCheckbox.uncheck()


          updateCheckAll()
          selected = if checked then allFields else []
          handler(selected, selFields)
          @delayedUpdate()

      ###
      Default handler for radio button yAxis events
        selected     The new value for the y axis
        selFields    A reference to the object responsible for tracking
                     y selection
      ###
      yAxisRadioHandler: (selected, selFields) =>
        @configs.displayField = selected

        # Repopulate the selection array without changing memory address
        if selFields
          selFields.splice(0, selFields.length)
          selFields.push(selected)

      ###
      Draws group selection controls. This includes a series of checkboxes and a
      selector for the grouping field. The checkbox text color should correspond
      to the graph color.
        groupByFields    Array of field indices you want to sort on
        startOnGroup     Call start() after grouping
      ###
      drawGroupControls: (groupByFields, startOnGroup = false) ->
        counter = 0
        groupList = undefined
        groupList =
          for g, i in data.groups
            color = globals.getColor(i)
            label =
              if g isnt '' then g
              else "No #{data.fields[globals.configs.groupById].fieldName}"
            style:   "color: #{color};"
            value:   i
            label:   label
            name:    'grouping'
            id:      'group-' + i
            logId:   'group-' + i
            picker:
              if not @isSummary
                type:  'color'
                color: color
                icon:  '<%= image_path('color-wheel.png') %>'

        inctx =
          groupByFields:
            for f in groupByFields
              value: f
              name:  data.fields[f].fieldName
              logId: 'group-by-field-' + f
          checkall:
            id:      'ckall-grouping'
            label:   '#Select All'
            logId:   'check-all-group-by'
          groups:    groupList

        outctx =
          id: 'group-ctrls'
          title: 'Groups'
          body: HandlebarsTemplates[hbCtrl('groups')](inctx)

        tools = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append tools

        # Add material design
        $('#vis-ctrls').find(".mdl-checkbox").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        $('#vis-ctrls').find(".mdl-radio").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        $('#vis-ctrls').find(".mdl-slider").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        # Initialize and track the status of this control panel
        globals.configs.groupOpen ?= false
        initCtrlPanel('group-ctrls', 'groupOpen')

        $('.color-picker').each (_, cpicker) =>
          cid = $(cpicker).data('color-id')
          a = $(cpicker).colorpicker
            outputType: 'hex'
            onOpen: () ->
              $("#label-color-#{cid}").parent().parent().css('background-color', '#EEE')
              globals.getColor(cid)
            onClose: () ->
              $("#label-color-#{cid}").parent().parent().css('background-color', '#FFF')
            onSubmit: (color) =>
              globals.setColor(cid, color)
              $("#label-color-#{cid}").css 'color', color
              @delayedUpdate()
              setTimeout (() => @start()), 1
            hPosition: (w, h) =>
              button = $(cpicker).children('img')
              buttonX = button.offset().left
              buttonW = button.width()
              buttonX - w + buttonW
            vPosition: (w, h) =>
              button = $(cpicker).children('img')
              buttonY = button.offset().top
              buttonH = button.height()
              buttonY + buttonH

          $(cpicker).click ->
            a.open()

        $('#group-by').val(globals.configs.groupById)
        $('#group-by').change (e) =>
          gid =
            if e.target then Number(e.target.value)
            else Number(e.srcElement.value)
          data.setGroupIndex(gid)
          globals.configs.groupById = gid
          data.groupSelection = for vals, keys in data.groups
            Number(keys)

          if startOnGroup then @start()
          else @delayedUpdate()

          @drawControls()

        # Initialize
        updateCheckAll = ->
          numGroups = data.groups.length
          numSel = data.groupSelection.length
          indeterminate = numSel > 0 and numSel < numGroups
          if numSel is numGroups
            $('#ckbx-lbl-ckall-grouping')[0].MaterialCheckbox.check()
          else
            $('#ckbx-lbl-ckall-grouping')[0].MaterialCheckbox.uncheck()
          $('#ckbx-ckall-grouping').prop('indeterminate', indeterminate)

        # Update the check all box
        updateCheckAll()

        # Initialize the checkboxes to the group selection
        $('label[name="grouping"]').each (key, elem) ->
          if Number(elem.getAttribute('value')) in data.groupSelection
            $(elem)[0].MaterialCheckbox.check()

        # Set handler for the group checkboxes
        $('input[name="grouping"]').click (e) =>
          index = Number(e.target.getAttribute('value'))
          if index in data.groupSelection
            arrayRemove(data.groupSelection, index)
          else data.groupSelection.push(index)

          updateCheckAll()
          @delayedUpdate()

        # Set handler for the check all box
        $('#ckbx-ckall-grouping').click =>
          checked = data.groupSelection.length isnt data.groups.length

          # Empty the array without changing the memory address
          data.groupSelection.splice(0, data.groupSelection.length)

          # Repopulate the array if necessary
          if checked then data.groupSelection.push(k) for v, k in data.groups

          $('label[name="grouping"]').each (key, elem) ->
            if checked
              $(elem)[0].MaterialCheckbox.check()
            else
              $(elem)[0].MaterialCheckbox.uncheck()

          updateCheckAll()
          @delayedUpdate()

      ###
      Draws vis saving controls
      ###
      drawSaveControls: (e) ->
        if (globals.options? and globals.options.isEmbed?) and not @chart?
          return

        # Draw the Save controls
        ctx = {}
        ctx.id = 'save-ctrls'
        ctx.title = 'Save'
        ctx.body = HandlebarsTemplates[hbCtrl('save')](ctx)
        save = HandlebarsTemplates[hbCtrl('body')](ctx)
        $('#vis-ctrls').append save

        # Only Highcharts vises can be printed and downloaded
        # TODO - implement these for non-Highchart vises
        unless @chart?
          $('#print-vis-btn').hide()
          $('#export-controls').hide()

        globals.userPermissions()

        ($ "#save-vis-btn").click ->
          globals.saveVis()

        ($ "#default-vis-btn").click ->
          globals.defaultVis()

        # Saving vises; need to redraw comments
        $('#download-image-btn').click =>
          canvas = @canvas
          @chart.exportChart(type: "image/png",
            chart:
                events:
                    load: () -> 
                        if globals.annotationSet isnt null
                          globals.annotationSet.drawAll(this, canvas))
          @chart.redraw()

        $('#download-vector-btn').click =>
          canvas = @canvas
          @chart.exportChart(type: "image/svg+xml",
            chart: 
                events: 
                    load: () -> 
                        if globals.annotationSet isnt null
                          globals.annotationSet.drawAll(this, canvas))
          @chart.redraw()

        $('#download-document-btn').click =>
          canvas = @canvas
          @chart.exportChart( type: "application/pdf",
            chart: 
                events: 
                    load: () -> 
                        if globals.annotationSet isnt null
                          globals.annotationSet.drawAll(this, canvas))
          @chart.redraw()
            
        $('#print-vis-btn').click =>
          # Resize chart if it is too big to print
        	if (@chart.chartWidth > 700)
            @chart.setSize(700, @chart.chartHeight, false)
          @chart.print()
          # Callback to detect when print controls have been closed
          callback = ->
            # After print controls are closed, resize vis (issue #2291)
            globals.configs.ctrlsOpen = true
            $(window).resize()
          setTimeout callback, 1000
          # Resize again; otherwise, the vis is half-sized.
          # Doesn't work without putting it in another callback; I dont know why
          call2 = -> $(window).resize()
          setTimeout call2, 1000

        # Initialize and track the status of this control panel
        globals.configs.saveOpen ?= false
        initCtrlPanel('save-ctrls', 'saveOpen')

      ###
      Draw tool controls (Analysis Type, Log Y Axis, etc.) for Pie Chart and
      Bar Charts
      ###
      drawToolControls: (sortBy = false, barChart = false, analysisTypeExcludes = [], drawAnalysisTypes = true) ->
        inctx = {}

        # Add Period to Base Tools
        if data.hasTimeData and data.timeType != data.GEO_TIME
          inctx.period = HandlebarsTemplates[hbCtrl('period')]
        
        # Populate sort fields
        if sortBy
          inctx.sortFields =
            for id in data.normalFields
              name: fieldTitle(data.fields[id])
              logId: 'sort-by-' + 'id'
              value: id

          inctx.sortFields.unshift
            name: 'Group Name'
            logId: 'sort-by-' + @SORT_DEFAULT
            value: @SORT_DEFAULT
            
        if drawAnalysisTypes
          # Set up analysis types from the list of exclusions
          analysisTypes = [
            @ANALYSISTYPE_MEAN
            @ANALYSISTYPE_MEAN_ERROR
            @ANALYSISTYPE_MEDIAN
            @ANALYSISTYPE_MAX
            @ANALYSISTYPE_MIN
            @ANALYSISTYPE_TOTAL
            @ANALYSISTYPE_COUNT
          ]
          analysisTypes = analysisTypes.filter (x) ->
            x not in analysisTypeExcludes

          # Analysis Types
          inctx.analysisTypes =
            for i in analysisTypes
                value: i
                id:    'analysis-type-' + i
                logId: 'analysis-type-' + i
                name:  'analysis-type'
                label:  @analysisTypeNames[i]

        # Bar-specific tools
        if barChart
          inctx.barChart = true
          inctx.logYAxis =
            id:    'log-y-axis'
            logId: 'logarithmic-y-axis'
            label: 'Logarithmic Y Axis'
          inctx.histogramDensity =
            id:    'hist-density'
            logId: 'histogram-density'
            label: 'Histogram Density'

        outctx =
          id: 'tools-ctrls'
          title: 'Tools'
          body: HandlebarsTemplates[hbCtrl('base-tools')](inctx)

        tools = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append tools

        # Add material design
        $('#vis-ctrls').find(".mdl-checkbox").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        $('#vis-ctrls').find(".mdl-radio").each (i,j) ->
          componentHandler.upgradeElement($(j)[0]);

        # Initialize and track the status of this control panel
        globals.configs.toolsOpen ?= false
        initCtrlPanel('tools-ctrls', 'toolsOpen')
        if drawAnalysisTypes
          query = "label[name='analysis-type'][value='#{@configs.analysisType}']"
          $(query)[0].MaterialRadio.check()
          
        if sortBy
          $('#sort-by').val(@configs.sortField)
          $('input[name="analysis-type"]').value = @configs.analysisType
          
        if globals.configs.logY and $('#ckbx-lbl-log-y-axis').length
          $('#ckbx-lbl-log-y-axis')[0].MaterialCheckbox.check()
        else if $('#ckbx-lbl-log-y-axis').length
          $('#ckbx-lbl-log-y-axis')[0].MaterialCheckbox.uncheck()
          
        if @configs.histogramDensity and $('#ckbx-lbl-hist-density').length
          $('#ckbx-lbl-hist-density')[0].MaterialCheckbox.check()
        else if $('#ckbx-lbl-hist-density').length
          $('#ckbx-lbl-hist-density')[0].MaterialCheckbox.uncheck()

        $('#sort-by').change (e) =>
          @configs.sortField = Number(e.target.value)
          @delayedUpdate()

        $('input[name="analysis-type"]').click (e) =>
          @configs.analysisType = Number(e.target.value)
          @delayedUpdate()

        $('#ckbx-log-y-axis').click (e) =>
          globals.configs.logY = !globals.configs.logY
          @start()
          
        $('#ckbx-hist-density').click () =>
          @configs.histogramDensity = not @configs.histogramDensity
          @delayedUpdate()
          
        # Set the correct options for period:
        $('#period-list').val(globals.configs.periodMode)

        $('#period-list').change =>
          globals.configs.periodMode = $('#period-list').val()
          if $('#period-list').val() != 'off'
            globals.configs.isPeriod = true
          else
            globals.configs.isPeriod = false
          $( "#group-by" ).trigger( "change" );
          @start()  

      ###
      Control button for adding annotations to a chart
      ###
      drawAnnotationControls: ->
        # Set up button for adding/editing annotation
        toggleAnnotationButton("comment-add")
        $('#add-annotation-button').show()
        $('#add-annotation-button').click (event) =>
          # Create an annotation set if one does not already exist
          globals.annotationSet ?= new AnnotationSet()
          
          # Attempt to edit selected one?
          ds = pt = field = null
          if (@chart.getSelectedPoints().length is 1)
            ds = globals.selectedDataSetId
            pt = globals.selectedPointId
            field = globals.selectedPointField
          else if Annotation.selectedAnnotation
            ds = Annotation.selectedAnnotationId1
            pt = Annotation.selectedAnnotationId2
          if (ds isnt null) and (globals.annotationSet.hasAnnotationAt ds, pt, @canvas, field)
            annotation = globals.annotationSet.getElement ds, pt, @canvas, field
            # Open the editor
            $('#annotation-editor>p').html("")
            $('#annotation-editor').data("annotation", annotation).dialog('open')
            return

          # Else create a new annotation
          if ((@canvas is "scatter-canvas") or (@canvas is "timeline-canvas")) and (@chart.getSelectedPoints().length isnt 1)
            $('#annotation-editor>p').html("<span style='color: gray;'>TIP: Select a point to lock onto a callout bubble.</span>")
          else
            $('#annotation-editor>p').html("")
          $('#annotation-editor').dialog('open')
          return

        # Setting up the editor

        # Set up link toggling
        $('#annotation-linktoggle').change () ->
          $('#annotation-link-container').toggle(this.checked)
        $('#annotation-linktoggle').change()
        
        # Enable the annotation editor
        $('#annotation-editor').dialog({modal: true, autoOpen: false, width: 400, resizable: false, \
                                        open:
                                          (event, ui) ->
                                            $(this).closest(".ui-dialog")
                                            .find(".ui-dialog-titlebar-close")
                                            .removeClass("ui-dialog-titlebar-close")
                                            .html("<span class='ui-button-icon-primary ui-icon ui-icon-closethick'></span>")
                                            if $('#annotation-editor').data("annotation")?
                                              annotation = $('#annotation-editor').data("annotation")
                                              $('#annotation-string').val(annotation.raw())
                                              if annotation.href() isnt null
                                                $('#annotation-link').val(annotation.href())
                                                $('input[name="annotation-linktoggle"]').prop("checked", true)
                                              else
                                                $('#annotation-link').val("")
                                                $('input[name="annotation-linktoggle"]').prop("checked", false)
                                              $('#annotation-linktoggle').change()
                                              $('input[name="annotation-bold"]').prop("checked", annotation.isBold())
                                              $('input[name="annotation-italic"]').prop("checked", annotation.isItalic())
                                              $('#annotation-size-small').prop("checked", annotation.isSmall())
                                              $('#annotation-size-large').prop("checked", not annotation.isSmall())
                                            else
                                              $('#annotation-string').val("New Annotation")
                                              $('#annotation-link').val("")
                                              $('input[name="annotation-linktoggle"]').prop("checked", false)
                                              $('#annotation-linktoggle').change()
                                        ,
                                        buttons: {                    
                                          Delete: () =>
                                            if $('#annotation-editor').data("annotation")?
                                              annotation = $('#annotation-editor').data("annotation")
                                              globals.annotationSet.deleteElement annotation.id1, annotation.id2, annotation.canvas, annotation.field
                                              $('#annotation-editor').dialog('close')
                                              toggleAnnotationButton("comment-add")  
                                              @chart.redraw() 
                                            $('#annotation-editor').dialog('close')                            
                                          Save: () =>                              
                                            msg = $("#annotation-string").val()
                                            if (msg isnt null) and (msg isnt "")
                                                bold = if $('input[name="annotation-bold"]').is(':checked') \
                                                       then "font-weight: bold; " \
                                                       else ""
                                                italic = if $('input[name="annotation-italic"]').is(':checked') \
                                                         then "font-style: italic; " \
                                                         else ""
                                                size = $('input[name="annotation-size"]:checked').val()      
                                                link = $("#annotation-link").val()
                                                msg = "<p style=\"font-size: " + size + "em; " + bold + italic + "\">" + msg + "</p>"
                                                if $('input[name="annotation-linktoggle"]').is(':checked') and (link isnt "")
                                                  if not /^(http|https):\/\//.test(link)
                                                    link = "http://" + link
                                                  msg = "<a href=\"" + link + "\">" + msg + "</a>"
                                                if $('#annotation-editor').data("annotation")?
                                                  $('#annotation-editor').data("annotation").msg = msg
                                                else if (@chart.getSelectedPoints().length is 1)
                                                  annotation = new Annotation msg, @canvas, true, globals.selectedDataSetId, \
                                                               globals.selectedPointId, globals.selectedPointField
                                                  globals.annotationSet.addToList annotation
                                                  annotation.initDraw globals.selectedPointX, globals.selectedPointY
                                                  toggleAnnotationButton("comment-edit")
                                                else
                                                  annotation = new Annotation msg, @canvas
                                                  annotation.initDraw 0, 0
                                                  globals.annotationSet.addToList annotation
                                                @chart.redraw()
                                            else
                                              @chart.redraw()
                                              toggleAnnotationButton("comment-add") 
                                            $('#annotation-editor').dialog('close')
                                        }
                                        ,
                                        close: () -> $('#annotation-editor').removeData("annotation")})
        # Change buttons to be icons
        $('.ui-dialog-buttonpane').find('button:contains("Delete")').addClass('btn').css('background','linear-gradient( 45deg, #ffcccc, #ffb2b2').html('').prepend('<span style="float:left;" class="ui-icon ui-icon-trash"></span>')
        $('.ui-dialog-buttonpane').find('button:contains("Save")').addClass('btn').css('background','linear-gradient( 45deg, #e5ffe5, #99ff99').html('').prepend('<span style="float:left;" class="ui-icon ui-icon-check"></span>')
      
      ###
      Do any necessary cleanup work before serialization.
      ###
      serializationCleanup: ->

    class window.BaseHighVis extends BaseVis
      ###
      Constructor
      Assigns target canvas name
      ###
      constructor: (@canvas) ->
        super(@canvas)

      ###
      Builds Highcharts options object
      Builds up the options common to all vis types.
      Subsequent derived classes should use $.extend
      to expand upon these after calling super()
      ###
      buildOptions: (animate = true) ->
        self = this
        canvas = @canvas

        @chartOptions =
          chart:
            renderTo: @canvas
            reflow: false
            animation: animate
            events:
              redraw: (e) ->
                $('.highcharts-annotation').remove()
                $('.highcharts-block-annotation').remove()
                Annotation.selectedAnnotation = false
                if globals.annotationSet isnt null
                  globals.annotationSet.drawAll(this, canvas, () =>
                    if Annotation.selectedAnnotation
                      toggleAnnotationButton("comment-edit")
                      if (selected = this.getSelectedPoints()).length isnt 0
                        selected[0].select()
                    else
                      toggleAnnotationButton("comment-add"))
          credits:
            enabled: false
          exporting:
            enabled: false
          legend:
            itemHoverStyle: ''
            backgroundColor: 'white'
            useHTML: true
            itemWidth: 125
            itemStyle:
              cursor: 'default'
          plotOptions:
            series:
              stickyTracking: false
              turboThreshold: 0
              events:
                legendItemClick: (event) ->
                  false
          series: []
          title: {}
          yAxis:
            minorTickInterval: 'auto'
            title:
              text: if globals.configs.fieldSelection.length isnt 1
                'Y-Values'
              else
                data.fields[globals.configs.fieldSelection[0]].fieldName

      ###
      Builds the 'fake series' for legend controls.
      Derrived objects should implement this.
      ###
      buildLegendSeries: ->
        quickFlash('An internal error has occured.', 'error')

      ###
      Start sequence used by runtime

      This is called when the user switched to this vis.
      Should re-build options and the chart itself to ensure sync with global
      settings.
      This method should also be usable as a 'full update' in that it
      should destroy the current chart if it exists before generating a fresh
      one.
      ###
      start: (animate = true) ->
        @buildOptions(animate)
        @chart = new Highcharts.Chart(@chartOptions)
        super()

      ###
      Update minor state
      Clears current series and re-loads the legend.
      Derrived classes should overload to add data drawing.
      ###
      update: ->
        # Clear the annotations
        toggleAnnotationButton("comment-add");
        $('.highcharts-block-annotation').remove()
        # Name Y Axis
        title = if globals.configs.fieldSelection.length isnt 1
          temp =
            text: 'Y-Values'
        else
          if "#{data.fields[globals.configs.fieldSelection[0]].unitName}" == ""
            temp = text: "#{data.fields[globals.configs.fieldSelection[0]].fieldName}"
          else
            temp =
              text: "#{data.fields[globals.configs.fieldSelection[0]].fieldName} " +
                "(#{data.fields[globals.configs.fieldSelection[0]].unitName})"

        @chart.yAxis[0].setTitle title, false

        # Remove curent data
        while @chart.series.length > 0
          @chart.series[0].remove(false)

        # Draw legend
        for options in @buildLegendSeries()
          @chart.addSeries options, false

        super()

      ###
      Performs an update while displaying the loading text
      ###
      delayedUpdate: ->
        @chart.showLoading 'Loading...'

        # Save context
        mySelf = this
        update = -> mySelf.update()
        setTimeout update, 1

        @chart.hideLoading()

      ###
      Method called when vis resize has begun
      Resize highcharts to match
      ###
      resize: (newWidth, newHeight, duration) ->
        @chart.setSize(newWidth, newHeight,
          {duration: duration, easing:'linear'})

      ###
      End sequence used by runtime
      This is called when the user switches away from this vis.
      Should destroy the chart, hide its canvas and remove controls.
      ###
      end: ->
        if "Pie" in data.relVis and globals.configs.groupById == data.NUMBER_FIELDS_FIELD
          $('#group-by').val(data.COMBINED_FIELD).change()
        if @chart?
          @chart.destroy()
          @chart = undefined

        super()

      ###
      Remove the chart and chart options object
      ###
      serializationCleanup: ->
        # Projects no longer get destroyed on serialize
