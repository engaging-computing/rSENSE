###
  * Copyright (c) 2011, iSENSE Project. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer. Redistributions in binary
  * form must reproduce the above copyright notice, this list of conditions and
  * the following disclaimer in the documentation and/or other materials
  * provided with the distribution. Neither the name of the University of
  * Massachusetts Lowell nor the names of its contributors may be used to
  * endorse or promote products derived from this software without specific
  * prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  * DAMAGE.
  *
###
$ ->
  if namespace.controller is "visualizations" and
  namespace.action in ["displayVis", "embedVis", "show"]

    window.globals ?= {}
    window.globals.configs ?= {}

    class window.BaseVis
      constructor: (@canvas) ->
        @configs ?= {}

      ANALYSISTYPE_TOTAL:     0
      ANALYSISTYPE_MAX:       1
      ANALYSISTYPE_MIN:       2
      ANALYSISTYPE_MEAN:      3
      ANALYSISTYPE_MEDIAN:    4
      ANALYSISTYPE_COUNT:     5

      SORT_DEFAULT:          -1

      analysisTypeNames: ["Total","Max","Min","Mean","Median","Row Count"]
      ###
      Start sequence used by runtime
      ###
      start: ->
        @drawControls()
        @update()

      ###
      Update minor state
      Redraws html controls
      Derived classes should overload to reload content.
      ###
      update: ->

      ###
      Default delayed update simply updates
      ###
      delayedUpdate: ->
        @update()

      ###
      Method called when vis resize has begun
      Defaults to doing nothing.
      ###
      resize: (newWidth, newHeight) ->

      ###
      End sequence used by runtime
      This is called when the user switches away from this vis.
      Should destroy the chart, hide its canvas and remove controls.
      ###
      end: ->
        ($ '#' + @canvas).hide()

      ###
      Draws controls
      Derived classes should write control HTML and bind handlers using
      the method such as drawGroupControls.
      ###
      drawControls: ->
        @clearControls()

      ###
      Clear the controls
      Unbinds control handlers and clears the HTML elements.
      ###
      clearControls: ->
        ($ '#controldiv').empty()

      ###
      Calculate data to be displayed subject to analysis type
      Returns an object of key-value pairs of the form { groupId, value }
      ###
      getGroupedData: (field) ->
        gData = {}
        for name, i in data.groups when i in data.groupSelection
          switch @configs.analysisType
            when @ANALYSISTYPE_TOTAL  then gData[i] = (data.getTotal  field, i)
            when @ANALYSISTYPE_MAX    then gData[i] = (data.getMax    field, i)
            when @ANALYSISTYPE_MIN    then gData[i] = (data.getMin    field, i)
            when @ANALYSISTYPE_MEAN   then gData[i] = (data.getMean   field, i)
            when @ANALYSISTYPE_MEDIAN then gData[i] = (data.getMedian field, i)
            when @ANALYSISTYPE_COUNT  then gData[i] = (data.getCount  field, i)
        gData

      ###
      Draws y axis controls
      This includes a series of checkboxes or radio buttons for selecting
      the active y axis field(s).
      ###
      drawYAxisControls: (radio = false, enableDataPoint = false) ->
        # Populate choices
        yFields =
          if enableDataPoint then data.normalFields
          else data.normalFields[1..data.normalFields.length]

        checked = false
        controls = '<div id="yAxisControl" class="vis_controls">'

        if radio
          controls += "<h3 class='clean_shrink'><a href='#'>Field:</a></h3>"
          controls += "<div class='outer_control_div'>"
        else
          controls += "<h3 class='clean_shrink'><a href='#'>Y Axis:</a></h3>"
          controls += "<div class='outer_control_div'>"
          controls +=
            "<div class='inner_control_div'>
              <div class='checkbox all-y-fields'>
                <label class='all-y'>
                  <input id='select-all-y' type='checkbox'> #Select All </input>
                </label>
              </div>
            </div>"
          if yFields.length == globals.configs.fieldSelection.length
            checked = true

        for f in yFields
          controls += "<div class='inner_control_div' >"

          if radio
            controls +=
              """
              <div class='radio'><label><input class='y_axis_input'
               name='y_axis_group' type='radio' value='#{f}'
               #{if (Number f) is @configs.displayField then "checked" else ""}>
               #{data.fields[f].fieldName}</label></div>
              """
          else
            controls +=
              """
              <div class='checkbox'><label><input class='y_axis_input'
               type='checkbox' value='#{f}'
               #{if (Number f) in globals.configs.fieldSelection then "checked" else ""}
               />#{data.fields[f].fieldName}</label></div>
              """
          controls += "</div>"

        controls += '</div></div>'

        # Write HTML
        ($ '#controldiv').append controls

        if checked
          ($ '#select-all-y').prop('checked', true)

        # Make y axis checkbox/radio handler
        if radio
          ($ '.y_axis_input').click (e) =>
            @configs.displayField = Number e.target.value
            globals.configs.fieldSelection = [@configs.displayField]
            @delayedUpdate()
        else
          ($ '.y_axis_input').click (e) =>
            index = Number e.target.value
            if index in globals.configs.fieldSelection
              arrayRemove(globals.configs.fieldSelection, index)
            else
              globals.configs.fieldSelection.push(index)
            if yFields.length == globals.configs.fieldSelection.length
              ($ '#select-all-y').prop('checked', true)
            else
              ($ '#select-all-y').prop('checked', false)

            @delayedUpdate()

        # Set up accordion
        globals.configs.yAxisOpen ?= 0

        ($ '#yAxisControl').accordion
          collapsible:true
          active:globals.configs.yAxisOpen

        ($ '#yAxisControl > h3').click ->
          globals.configs.yAxisOpen = (globals.configs.yAxisOpen + 1) % 2

        ($ '#select-all-y').click =>
          yFields =
            if enableDataPoint then data.normalFields
            else data.normalFields[1..data.normalFields.length]

          if yFields.length != globals.configs.fieldSelection.length
            ($ '#yAxisControl').find('.y_axis_input').each (i,j) ->
              ($ j).prop('checked', true)
            globals.configs.fieldSelection = yFields
          else
            for element in data.normalFields
              arrayRemove(globals.configs.fieldSelection, element)
            ($ '#yAxisControl').find('.y_axis_input').each (i,j) ->
              ($ j).prop('checked', false)
          @delayedUpdate()

      ###
      Draws group selection controls
      This includes a series of checkboxes and a selector for the grouping field.
      The checkbox text color should correspond to the graph color.
      ###
      drawGroupControls: (startOnGroup = false, radio = false, excludeNameAndCombined = false) ->

        controls = '<div id="groupControl" class="vis_controls">'

        controls += "<h3 class='clean_shrink'><a href='#'>Groups:</a></h3>"

        controls += "<div class='outer_control_div'>"

        # Add grouping selector
        controls += '<div class="inner_control_div"> Group By: '
        controls += '<select id="groupSelector" class="form-control">'

        if data.textFields.length > 2 and excludeNameAndCombined
          yFields = data.textFields[2..data.textFields.length]
        else
          yFields = data.textFields

        for fieldIndex in yFields
          sel = if fieldIndex is globals.configs.groupById then 'selected' else ''
          controls += "<option value='#{Number fieldIndex}' #{sel}>#{data.fields[fieldIndex].fieldName}</option>"

        controls += "</select></div>"

        controls += "<table>"

        # Populate choices
        counter = 0
        if data.groups.length > 1
          controls += "<tr><td>"
          controls += "<div class='inner_control_div'>"

          if not radio
            controls += """<div class='checkbox'><label><input id='checkbox_all'
              class='group_input_all' type='checkbox' value='#{gIndex}'
              #{if data.groupSelection.length == data.groups.length then "checked" else ""}>
              #Check All</label></div>"""
            controls += "</td><td></td></tr>"

        for group, gIndex in data.groups
          color_id = counter % globals.configs.colors.length
          color = globals.configs.colors[color_id]
          controls += "<tr><td class='label-dataset-name'>"
          controls += "<div class='inner_control_div' id='label-color-#{color_id}'"
          controls += "style=\"color:#{color};\">"

          if radio
            # Radio groups can only have one group selected
            groupSelection = [data.groupSelection.reduce (a, b) -> Math.min(a,b)]
            data.groupSelection = groupSelection

            selectedGroup = data.groupSelection[0]
            controls += "<div class='radio'><label><input class='group_input' type='radio' name='groups'"
            controls += " value='#{gIndex}' "
            controls += "#{if (Number gIndex) is selectedGroup then "checked" else ""}/>"
            if group isnt ''
              controls += "#{group}</label>"
            else
              controls +="No #{data.fields[globals.configs.groupById].fieldName}</label>"
          else
            controls += "<div class='checkbox'><label><input class='group_input' type='checkbox'"
            controls += " value='#{gIndex}' "
            controls += "#{if (Number gIndex) in data.groupSelection then "checked" else ""}/>"
            if group isnt ''
              controls += "#{group}</label>"
            else
              controls +="No #{data.fields[globals.configs.groupById].fieldName}</label>"
          controls += "</div></div>"
          controls += "</td><td class='label-dataset-color'>"
          controls += """<a href="javascript:void;" class="color-picker" data-color="#{color}" data-color-id="#{color_id}">
                         <img height="20px" width="20px" src="<%= image_path('color-wheel.png') %>"></a>"""
          controls += "</td></tr>"
          counter += 1

        controls += "</table>"

        controls += '</div></div>'

        # Write HTML
        ($ '#controldiv').append controls

        ($ '.color-picker').each (_, cpicker) =>
          cid = $(cpicker).attr 'data-color-id'
          $(cpicker).colorpicker 'create',
            outputType: 'hex'
            onOpen: () ->
              $("#label-color-#{cid}").parent().parent().css 'background-color', '#EEE'
            onClose: () ->
              $("#label-color-#{cid}").parent().parent().css 'background-color', '#FFF'
            onSubmit: (color) =>
              globals.configs.colors[cid] = color
              $("#label-color-#{cid}").css 'color', color
              @delayedUpdate()
              setTimeout (() => @start()), 1
          ($ cpicker).colorpicker 'setcolor', globals.configs.colors[cid]

        # Make group select handler
        ($ '#groupSelector').change (e) =>
          element = e.target or e.srcElement
          data.setGroupIndex (Number element.value)

          globals.configs.groupById = Number(element.value)

          data.groupSelection = for vals, keys in data.groups
            Number keys

          if startOnGroup
            @start()
          else
            @delayedUpdate()

          @drawControls()

        if radio
          # Make group checkbox handler
          ($ '.group_input').click (e) =>
            ($ '.group_input').each () ->
              if @checked
                data.groupSelection = [Number @value]
            @delayedUpdate()

        else
          # Make group checkbox handler
          ($ '.group_input').click (e) =>
            selection = []
            ($ '.group_input').each () ->
              if @checked
                selection.push Number @value
              else
            data.groupSelection = selection

            if data.groupSelection.length == data.groups.length
              ($ '#checkbox_all').prop("checked", true)
              ($ '#checkbox_all').prop("indeterminate", false)
            else if data.groupSelection.length > 0
              ($ '#checkbox_all').prop("checked", false)
              ($ '#checkbox_all').prop("indeterminate", true)
            else
              ($ '#checkbox_all').prop("checked", false)
              ($ '#checkbox_all').prop("indeterminate", false)

            @delayedUpdate()

          # Make group checkbox for all groups
          ($ '.group_input_all').click (e) =>
            if e.target.checked
              data.groupSelection = for vals, keys in data.groups
                Number keys
              ($ '.group_input').prop 'checked', true
            else
              data.groupSelection = []
              ($ '.group_input').prop 'checked', false

            @delayedUpdate()

        # Set up accordion
        globals.configs.groupOpen ?= 0

        ($ '#groupControl').accordion
          collapsible:true
          active:globals.configs.groupOpen

        ($ '#groupControl > h3').click ->
          globals.configs.groupOpen = (globals.configs.groupOpen + 1) % 2

      ###
      Draws vis saving controls
      ###
      drawSaveControls: (e) ->
        if (globals.options? and globals.options.isEmbed?) and not @chart?
          return

        controls = '<div id="saveControl" class="vis_controls">'

        controls += "<h3 class='clean_shrink'><a href='#'>Saving:</a></h3>"
        controls += "<div class='outer_control_div' style='text-align:center'>"

        if not (globals.options? and globals.options.isEmbed?)
          controls += "<div class='inner_control_div'>"
          controls += "<button id='saveVisButton' class='save_button btn btn-sm btn-default btn-success'>"
          controls += "Save Visualization </button>"
          controls += "</div>"

          # Default vises only apply to project vises
          if namespace.action is 'displayVis'
            controls += "<div class='inner_control_div'>"
            controls += "<button id='defaultVisButton' class='save_button btn btn-sm btn-primary'>"
            controls += "Make Default </button>"
            controls += "</div>"

        globals.verifyUser ( -> ), ( ->
          $('#saveVisButton').attr('disabled', 'disabled')), false
        globals.verifyUser ( -> ), (->
          $('#defaultVisButton').remove()), true

        if @chart?

          controls += "<div class='inner_control_div'>"
          controls += "<button id='downloadVisButton' class='save_button btn btn-sm btn-default'>"
          controls += "Download Visualization </button>"
          controls += "</div>"

          controls += "<div class='inner_control_div'>"
          controls += "<button id='printVisButton' class='save_button btn btn-sm btn-default'>"
          controls += "Print Visualization </button>"
          controls += "</div>"

        controls += '</div></div>'

        # Write HTML
        ($ '#controldiv').append controls

        ($ "#saveControl button").button()

        ($ "#saveVisButton").click ->
          globals.verifyUser (-> globals.saveVis()), (->
            alert 'You must be logged in to save a visualization.'), false

        ($ "#defaultVisButton").click ->
          globals.verifyUser (-> globals.defaultVis()), (->
            alert 'You must be logged in as the project owner to set a
            default visualization.'), true

        ($ '#downloadVisButton').click =>
          @chart.exportChart
            type: "image/svg+xml"

        ($ '#printVisButton').click =>
          @chart.print()

        #Set up accordion
        globals.configs.saveOpen ?= 0

        ($ '#saveControl').accordion
          collapsible:true
          active:globals.configs.saveOpen

        ($ '#saveControl > h3').click ->
          globals.configs.saveOpen = (globals.configs.saveOpen + 1) % 2
      ###
      Draw tool controls (Analysis Type, Log Y Axis, etc.) for Pie Chart and Bar Chart
      ###
      drawToolControls: (sortBy = false, logYAxis = false) ->

        controls =  '<div id="toolControl" class="vis_controls">'
        controls += "<h3 class='clean_shrink'><a href='#'>Tools:</a></h3>"
        controls += "<div class='outer_control_div'>"
        if sortBy
          controls += "<div class='inner_control_div'>"
          controls += 'Sort by: <select id="sortField" class="sortField form-control">'
          tempFields = for fieldID in data.normalFields
            [fieldID, data.fields[fieldID].fieldName]
          tempFields = [].concat [[@SORT_DEFAULT, 'Group Name']], tempFields

          for [fieldID, fieldName] in tempFields
            selected = if @configs.sortField is fieldID then 'selected' else ''
            controls += "<option value='#{fieldID}' #{selected}>#{fieldName}</option>"

          controls += '</select></div><br>'
          controls += "<h4 class='clean_shrink'>Analysis Type</h4><div id='analysis_types'>"

        for typestring, type in @analysisTypeNames
          controls += "<div class='inner_control_div'>"
          controls += "<div class='radio'><label><input type='radio' class='analysisType' "
          controls += "name='analysisTypeSelector' value='"
          controls += "#{type}' #{if type is @configs.analysisType then 'checked' else ''}> "

          switch typestring
            when 'Max' then controls += 'Maximum </label> </div>'
            when 'Min' then controls += 'Minimum </label> </div>'
            when 'Mean' then controls += 'Mean (Average)</label></div>'
            else controls += "#{typestring} </label></div>"

          controls += '</div>'
        controls += "</div>"

        if data.logSafe is 1 and logYAxis
          controls += "<h4 class='clean_shrink'>Other</h4>"
          controls += '<div class="inner_control_div">'
          controls += "<div class='checkbox'><label><input class='logY_box' type='checkbox' "
          controls += "name='tooltip_selector' #{if globals.configs.logY is 1 then 'checked' else ''}/> "
          controls += "Logarithmic Y Axis</label></div>"
          controls += "</div>"

        controls += '</div></div>'

        ### --- ###
        # Write HTML
        ($ '#controldiv').append controls

        ($ '.analysisType').change (e) =>
          @configs.analysisType = Number e.target.value
          @delayedUpdate()

        ($ '#sortField').change (e) =>
          @configs.sortField = Number e.target.value
          @delayedUpdate()

        ($ '.logY_box').click (e) =>
          globals.configs.logY = (globals.configs.logY + 1) % 2
          @start()

        # Set up accordion
        globals.configs.toolsOpen ?= 0

        ($ '#toolControl').accordion
          collapsible:true
          active:globals.configs.toolsOpen

        ($ '#toolControl > h3').click ->
          globals.configs.toolsOpen = (globals.configs.toolsOpen + 1) % 2

      ###
      Hides the control div and remembers its previous size.
      ###
      hideControls: ->
        @controlWidth = ($ '#controldiv').width()
        ($ '#controldiv').width 0
        ($ '#controlcontainer').hide()
        ($ '#' + @canvas).css
          width: ($ "#viscontainer").width()

      ###
      Returns the control div with its previous size intact.
      ###
      unhideControls: ->
        ($ '#controldiv').width @controlWidth
        ($ '#controlcontainer').show()

      ###
      Do any necessary cleanup work before serialization.
      ###
      serializationCleanup: ->

    class window.BaseHighVis extends BaseVis
      ###
      Constructor
      Assigns target canvas name
      ###
      constructor: (@canvas) ->
        super(@canvas)

      ###
      Builds Highcharts options object
      Builds up the options common to all vis types.
      Subsequent derived classes should use $.extend
      to expand upon these after calling super()
      ###
      buildOptions: ->

        self = this

        @chartOptions =
          chart:
            renderTo: @canvas
            reflow: false
          credits:
            enabled: false
          exporting:
            enabled: false
          legend:
            itemHoverStyle: ''
            backgroundColor: 'white'
            useHTML: true
            itemWidth: 125
            itemStyle:
              cursor: 'default'
          plotOptions:
            series:
              stickyTracking: false
              turboThreshold: 0
              events:
                legendItemClick: (event) ->
                  false
          series: []
          title: {}
          yAxis:
            minorTickInterval: 'auto'
            title:
              text: if globals.configs.fieldSelection.length isnt 1
                'Y-Values'
              else
                data.fields[globals.configs.fieldSelection[0]].fieldName

      ###
      Builds the 'fake series' for legend controls.
      Derrived objects should implement this.
      ###
      buildLegendSeries: ->
        console.log console.trace()
        alert   """
          BAD IMPLEMENTATION ALERT!

          Called: 'BaseVis.buildLegendSeries'

          See logged stack trace in console.
          """
      ###
      Start sequence used by runtime

      This is called when the user switched to this vis.
      Should re-build options and the chart itself to ensure sync with global settings.
      This method should also be usable as a 'full update' in that it
      should destroy the current chart if it exists before generating a fresh one.

      TODO: Update comment
      ###
      start: ->
        @buildOptions()

        @chart = new Highcharts.Chart @chartOptions

        ($ '#' + @canvas).show()

        super()

      ###
      Update minor state
      Clears current series and re-loads the legend.
      Derrived classes should overload to add data drawing.
      ###
      update: ->
        # Name Y Axis
        title = if globals.configs.fieldSelection.length isnt 1
          temp =
            text: 'Y-Values'
        else
          if "#{data.fields[globals.configs.fieldSelection[0]].unitName}" == ""
            temp = text: "#{data.fields[globals.configs.fieldSelection[0]].fieldName}"
          else
            temp =
              text: "#{data.fields[globals.configs.fieldSelection[0]].fieldName} " +
                "(#{data.fields[globals.configs.fieldSelection[0]].unitName})"

        @chart.yAxis[0].setTitle title, false

        # Remove curent data
        while @chart.series.length > 0
          @chart.series[0].remove(false)

        # Draw legend
        for options in @buildLegendSeries()
          @chart.addSeries options, false

      ###
      Performs an update while displaying the loading text
      ###
      delayedUpdate: ->
        @chart.showLoading 'Loading...'

        # Save context
        mySelf = this
        update = -> mySelf.update()
        setTimeout update, 1

        @chart.hideLoading()

      ###
      Method called when vis resize has begun
      Resize highcharts to match
      ###
      resize: (newWidth, newHeight, duration) ->
        @chart.setSize(newWidth, newHeight, {duration: duration, easing:'linear'})

      ###
      End sequence used by runtime
      This is called when the user switches away from this vis.
      Should destroy the chart, hide its canvas and remove controls.
      ###
      end: ->
        if @chart?
          @chart.destroy()
          @chart = undefined

        super()

      ###
      Remove the chart and chart options object
      ###
      serializationCleanup: ->
        # Projects no longer get destroyed on serialize
