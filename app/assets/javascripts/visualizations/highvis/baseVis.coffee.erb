###
  * Copyright (c) 2011, iSENSE Project. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer. Redistributions in binary
  * form must reproduce the above copyright notice, this list of conditions and
  * the following disclaimer in the documentation and/or other materials
  * provided with the distribution. Neither the name of the University of
  * Massachusetts Lowell nor the names of its contributors may be used to
  * endorse or promote products derived from this software without specific
  * prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  * DAMAGE.
  *
###
$ ->
  if namespace.controller is 'visualizations' and
  namespace.action in ['displayVis', 'embedVis', 'show']
    window.globals ?= {}
    window.globals.configs ?= {}

    class window.BaseVis
      constructor: (@canvas) ->
        @configs ?= {}

      ANALYSISTYPE_TOTAL:     0
      ANALYSISTYPE_MAX:       1
      ANALYSISTYPE_MIN:       2
      ANALYSISTYPE_MEAN:      3
      ANALYSISTYPE_MEDIAN:    4
      ANALYSISTYPE_COUNT:     5

      SORT_DEFAULT:          -1

      analysisTypeNames: ["Total", "Maximum", "Mininum", "Mean (Average)",
        "Median", "Row Count"]

      ###
      Start sequence used by runtime
      ###
      start: ->
        $('#' + @canvas).show()
        @drawControls()
        @update()

      ###
      Update minor state
      Redraws html controls
      Derived classes should overload to reload content.
      ###
      update: ->

      ###
      Default delayed update simply updates
      ###
      delayedUpdate: ->
        @update()

      ###
      Method called when vis resize has begun
      Defaults to doing nothing.
      ###
      resize: (newWidth, newHeight) ->

      ###
      End sequence used by runtime
      This is called when the user switches away from this vis.
      Should destroy the chart, hide its canvas and remove controls.
      ###
      end: ->
        $('#' + @canvas).hide()

      ###
      Draws controls
      Derived classes should write control HTML and bind handlers using
      the method such as drawGroupControls.
      ###
      drawControls: ->
        @clearControls()

      ###
      Clear the controls
      Unbinds control handlers and clears the HTML elements.
      ###
      clearControls: ->
        $('#vis-ctrls').empty()

      ###
      Calculate data to be displayed subject to analysis type
      Returns an object of key-value pairs of the form { groupId, value }
      ###
      getGroupedData: (field) ->
        gData = {}
        for name, i in data.groups when i in data.groupSelection
          switch @configs.analysisType
            when @ANALYSISTYPE_TOTAL  then gData[i] = (data.getTotal  field, i)
            when @ANALYSISTYPE_MAX    then gData[i] = (data.getMax    field, i)
            when @ANALYSISTYPE_MIN    then gData[i] = (data.getMin    field, i)
            when @ANALYSISTYPE_MEAN   then gData[i] = (data.getMean   field, i)
            when @ANALYSISTYPE_MEDIAN then gData[i] = (data.getMedian field, i)
            when @ANALYSISTYPE_COUNT  then gData[i] = (data.getCount  field, i)
        gData

      ###
      A wrapper for making y-axis controls
      See drawAxisControls for more detail
      ###
      drawYAxisControls: (selFields, allFields, radio, name = 'Y Axis',
        iniRadio = 0, handler = ->) ->
        @drawAxisControls('y-axis', name, selFields, allFields, radio,
          iniRadio, handler)

        # Initialize and track the status of this control panel
        globals.configs.yAxisOpen ?= false
        initCtrlPanel('y-axis-ctrls', 'yAxisOpen')

      ###
      Draws axis controls
      This includes a series of checkboxes or radio buttons for selecting
      the active axis field(s).
        id         Identifier prefix for the control panel
        title      Title for the control panel
        selFields  Object that tracks the current field selection
        allFields  Listing of valid fields
        radio      Boolean to draw radio buttons instead of checkboxes
        iniRadio   Initial value of radio if radio == true (optional)
        handler    A function of two parameters to handle selection events
                   Takes the form: (selected, selFields) ->
      ###
      drawAxisControls: (id, title, selFields, allFields, radio, iniRadio = 0,
        handler = ->) ->
        # If there is only one option, then no radio button interaction is
        # possible
        if radio and allFields.length <= 1 then return

        # Configure the y-axis controls
        inctx = {}
        inctx.fields = for f in allFields
          id:    id + '-field-' + f
          label: fieldTitle(data.fields[f])
          value: f
          logId: id + '-field-' + f
          name:  id
        template =  if radio then 'axis-radio' else 'axis-check'
        unless radio
          inctx.checkall =
            id:    'ckall-' + id
            label: '#Select All'
            logId: 'check-all-' + id

        # Draw the y-axis controls
        outctx = {}
        outctx.id = id + '-ctrls'
        outctx.title = title
        outctx.body = HandlebarsTemplates[hbCtrl(template)](inctx)
        axisTools = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append axisTools

        # Initialize checked and make y axis checkbox/radio handler
        if radio
          # Set the current display field
          query = "input[name='#{id}'][value='#{iniRadio}']"
          $(query).prop('checked', 'true')

          # Record any changes to the display field
          $("input[name='#{id}']").click (e) =>
            index = Number(e.target.value)
            query = "input[name='#{id}'][value='#{index}']"
            $(query).prop('checked', 'true')

            handler(index, selFields)
            @delayedUpdate()

          return

        # Initialize
        updateCheckAll = ->
          numFields = allFields.length
          numSel = selFields.length
          indeterminate = numSel > 0 and numSel < numFields
          $('#ckbx-ckall-' + id).prop('checked', numSel is numFields)
          $('#ckbx-ckall-' + id).prop('indeterminate', indeterminate)

        # Update the check all box
        updateCheckAll()

        # Else initialize the checkboxes to the field selection
        $("input[name='#{id}']").each (key, elem) ->
          if Number(elem.value) in selFields then $(elem).prop('checked', true)

        # Set handler for the field checkboxes
        $("input[name='#{id}']").click (e) =>
          index = Number(e.target.value)
          if index in selFields then arrayRemove(selFields, index)
          else selFields.push(index)

          updateCheckAll()
          handler(index, selFields)
          @delayedUpdate()

        # Set handler for the check all box
        $('#ckbx-ckall-' + id).click =>
          checked = selFields.length isnt allFields.length

          # Empty the array without changing the memory address
          selFields.splice(0, selFields.length)

          # Repopulate the array if necessary
          if checked then selFields.push(f) for f in allFields

          $("input[name='#{id}']").each (key, elem) ->
            $(elem).prop('checked', checked)

          updateCheckAll()
          selected = if checked then allFields else []
          handler(selected, selFields)
          @delayedUpdate()

      ###
      Default handler for radio button yAxis events
        selected     The new value for the y axis
        selFields    A reference to the object responsible for tracking
                     y selection
      ###
      yAxisRadioHandler: (selected, selFields) =>
        @configs.displayField = selected

        # Repopulate the selection array without changing memory address
        if selFields
          selFields.splice(0, selFields.length)
          selFields.push(selected)

      ###
      Draws group selection controls. This includes a series of checkboxes and a
      selector for the grouping field. The checkbox text color should correspond
      to the graph color.
        groupByFields    Array of field indices you want to sort on
        startOnGroup     Call start() after grouping
      ###
      drawGroupControls: (groupByFields, startOnGroup = false) ->
        counter = 0
        groupList = undefined
        groupList =
          for g, i in data.groups
            color = globals.getColor(i)
            label =
              if g isnt '' then g
              else "No #{data.fields[globals.configs.groupById].fieldName}"
            style:   "color: #{color};"
            value:   i
            label:   label
            name:    'grouping'
            id:      'group-' + i
            logId:   'group-' + i
            picker:
              type:  'color'
              color: color
              icon:  '<%= image_path('color-wheel.png') %>'

        inctx =
          groupByFields:
            for f in groupByFields
              value: f
              name:  data.fields[f].fieldName
              logId: 'group-by-field-' + f
          checkall:
            id:      'ckall-grouping'
            label:   '#Select All'
            logId:   'check-all-group-by'
          groups:    groupList

        outctx =
          id: 'group-ctrls'
          title: 'Groups'
          body: HandlebarsTemplates[hbCtrl('groups')](inctx)

        tools = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append tools

        # Initialize and track the status of this control panel
        globals.configs.groupOpen ?= false
        initCtrlPanel('group-ctrls', 'groupOpen')

        $('.color-picker').each (_, cpicker) =>
          cid = $(cpicker).data('color-id')
          $(cpicker).colorpicker 'create',
            outputType: 'hex'
            onOpen: () ->
              $("#label-color-#{cid}").parent().parent().css('background-color',
                '#EEE')
            onClose: () ->
              $("#label-color-#{cid}").parent().parent().css('background-color',
                '#FFF')
            onSubmit: (color) =>
              globals.setColor(cid, color)
              $("#label-color-#{cid}").css 'color', color
              @delayedUpdate()
              setTimeout (() => @start()), 1
          $(cpicker).colorpicker 'setcolor', globals.getColor(cid)

        $('#group-by').val(globals.configs.groupById)
        $('#group-by').change (e) =>
          gid =
            if e.target then Number(e.target.value)
            else Number(e.srcElement.value)

          data.setGroupIndex(gid)
          globals.configs.groupById = gid
          data.groupSelection = for vals, keys in data.groups
            Number(keys)

          if startOnGroup then @start()
          else @delayedUpdate()

          @drawControls()

        # Initialize
        updateCheckAll = ->
          numGroups = data.groups.length
          numSel = data.groupSelection.length
          indeterminate = numSel > 0 and numSel < numGroups
          $('#ckbx-ckall-grouping').prop('checked', numSel is numGroups)
          $('#ckbx-ckall-grouping').prop('indeterminate', indeterminate)

        # Update the check all box
        updateCheckAll()

        # Initialize the checkboxes to the group selection
        $('input[name="grouping"]').each (key, elem) ->
          if Number(elem.value) in data.groupSelection
            $(elem).prop('checked', true)

        # Set handler for the group checkboxes
        $('input[name="grouping"]').click (e) =>
          index = Number(e.target.value)
          if index in data.groupSelection
            arrayRemove(data.groupSelection, index)
          else data.groupSelection.push(index)

          updateCheckAll()
          @delayedUpdate()

        # Set handler for the check all box
        $('#ckbx-ckall-grouping').click =>
          checked = data.groupSelection.length isnt data.groups.length

          # Empty the array without changing the memory address
          data.groupSelection.splice(0, data.groupSelection.length)

          # Repopulate the array if necessary
          if checked then data.groupSelection.push(k) for v, k in data.groups

          $('input[name="grouping"]').each (key, elem) ->
            $(elem).prop('checked', checked)

          updateCheckAll()
          @delayedUpdate()

      ###
      Draws vis saving controls
      ###
      drawSaveControls: (e) ->
        if (globals.options? and globals.options.isEmbed?) and not @chart?
          return

        # Draw the Save controls
        ctx = {}
        ctx.id = 'save-ctrls'
        ctx.title = 'Save'
        ctx.body = HandlebarsTemplates[hbCtrl('save')](ctx)
        save = HandlebarsTemplates[hbCtrl('body')](ctx)
        $('#vis-ctrls').append save

        # Only Highcharts vises can be printed and downloaded
        # TODO - implement these for non-Highchart vises
        unless @chart?
          $('#print-vis-btn').hide()
          $('#download-vis-btn').hide()

        globals.userPermissions()

        ($ "#save-vis-btn").click ->
          globals.saveVis()

        ($ "#default-vis-btn").click ->
          globals.defaultVis()

        $('#download-vis-btn').click =>
          @chart.exportChart
            type: "image/svg+xml"

        $('#print-vis-btn').click =>
          @chart.print()

        # Initialize and track the status of this control panel
        globals.configs.saveOpen ?= false
        initCtrlPanel('save-ctrls', 'saveOpen')

      ###
      Draw tool controls (Analysis Type, Log Y Axis, etc.) for Pie Chart and
      Bar Charts
      ###
      drawToolControls: (sortBy = false, logYAxis = false) ->
        inctx = {}

        # Populate sort fields
        if sortBy
          inctx.sortFields =
            for id in data.normalFields
              name: fieldTitle(data.fields[id])
              logId: 'sort-by-' + 'id'
              value: id

          inctx.sortFields.unshift
            name: 'Group Name'
            logId: 'sort-by-' + @SORT_DEFAULT
            value: @SORT_DEFAULT

        # Analysis Types
        inctx.analysisTypes =
          for name, i in @analysisTypeNames
            value: i
            id:    'analysis-type-' + i
            logId: 'analysis-type-' + i
            name:  'analysis-type'
            label:  name

        # Logarithmic Y Axis
        if logYAxis
          id = 'log-y-axis'
          inctx.logYAxis =
            id:    id
            logId: 'logarithmic-y-axis'
            label: 'Logarithmic Y Axis'

        outctx =
          id: 'tools-ctrls'
          title: 'Tools'
          body: HandlebarsTemplates[hbCtrl('base-tools')](inctx)

        tools = HandlebarsTemplates[hbCtrl('body')](outctx)
        $('#vis-ctrls').append tools

        # Initialize and track the status of this control panel
        globals.configs.toolsOpen ?= false
        initCtrlPanel('tools-ctrls', 'toolsOpen')
        query = "input[name='analysis-type'][value='#{@configs.analysisType}']"
        $(query).prop('checked', 'true')
        $('#sort-by').val(@configs.sortField)
        $('input[name="analysis-type"]').value = @configs.analysisType
        $('#ckbx-log-y-axis').prop('checked', globals.configs.logY)

        $('#sort-by').change (e) =>
          @configs.sortField = Number(e.target.value)
          @delayedUpdate()

        $('input[name="analysis-type"]').click (e) =>
          @configs.analysisType = Number(e.target.value)
          @delayedUpdate()

        $('#ckbx-log-y-axis').click (e) =>
          globals.configs.logY = !globals.configs.logY
          @start()

      ###
      Do any necessary cleanup work before serialization.
      ###
      serializationCleanup: ->

    class window.BaseHighVis extends BaseVis
      ###
      Constructor
      Assigns target canvas name
      ###
      constructor: (@canvas) ->
        super(@canvas)

      ###
      Builds Highcharts options object
      Builds up the options common to all vis types.
      Subsequent derived classes should use $.extend
      to expand upon these after calling super()
      ###
      buildOptions: ->
        self = this

        @chartOptions =
          chart:
            renderTo: @canvas
            reflow: false
          credits:
            enabled: false
          exporting:
            enabled: false
          legend:
            itemHoverStyle: ''
            backgroundColor: 'white'
            useHTML: true
            itemWidth: 125
            itemStyle:
              cursor: 'default'
          plotOptions:
            series:
              stickyTracking: false
              turboThreshold: 0
              events:
                legendItemClick: (event) ->
                  false
          series: []
          title: {}
          yAxis:
            minorTickInterval: 'auto'
            title:
              text: if globals.configs.fieldSelection.length isnt 1
                'Y-Values'
              else
                data.fields[globals.configs.fieldSelection[0]].fieldName
      ###
      Builds the 'fake series' for legend controls.
      Derrived objects should implement this.
      ###
      buildLegendSeries: ->
        quickFlash('An internal error has occured.', 'error')

      ###
      Start sequence used by runtime

      This is called when the user switched to this vis.
      Should re-build options and the chart itself to ensure sync with global
      settings.
      This method should also be usable as a 'full update' in that it
      should destroy the current chart if it exists before generating a fresh
      one.
      ###
      start: ->
        @buildOptions()
        @chart = new Highcharts.Chart(@chartOptions)
        super()

      ###
      Update minor state
      Clears current series and re-loads the legend.
      Derrived classes should overload to add data drawing.
      ###
      update: ->
        # Name Y Axis
        title = if globals.configs.fieldSelection.length isnt 1
          temp =
            text: 'Y-Values'
        else
          if "#{data.fields[globals.configs.fieldSelection[0]].unitName}" == ""
            temp = text: "#{data.fields[globals.configs.fieldSelection[0]].fieldName}"
          else
            temp =
              text: "#{data.fields[globals.configs.fieldSelection[0]].fieldName} " +
                "(#{data.fields[globals.configs.fieldSelection[0]].unitName})"

        @chart.yAxis[0].setTitle title, false

        # Remove curent data
        while @chart.series.length > 0
          @chart.series[0].remove(false)

        # Draw legend
        for options in @buildLegendSeries()
          @chart.addSeries options, false

      ###
      Performs an update while displaying the loading text
      ###
      delayedUpdate: ->
        @chart.showLoading 'Loading...'

        # Save context
        mySelf = this
        update = -> mySelf.update()
        setTimeout update, 1

        @chart.hideLoading()

      ###
      Method called when vis resize has begun
      Resize highcharts to match
      ###
      resize: (newWidth, newHeight, duration) ->
        @chart.setSize(newWidth, newHeight,
          {duration: duration, easing:'linear'})

      ###
      End sequence used by runtime
      This is called when the user switches away from this vis.
      Should destroy the chart, hide its canvas and remove controls.
      ###
      end: ->
        if @chart?
          @chart.destroy()
          @chart = undefined

        super()

      ###
      Remove the chart and chart options object
      ###
      serializationCleanup: ->
        # Projects no longer get destroyed on serialize
